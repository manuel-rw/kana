// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?   @db.Text
    salt          String?   @db.Text
    accounts      Account[]
    sessions      Session[]
    roles         Role[]
}

model Role {
    id          String  @id @default(cuid())
    name        String
    users       User[]
    isAdmin     Boolean
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Kana {
    id          String @id @default(cuid())
    kana        String
    roumaji     String
    groupId     String
    group       KanaGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
    userSolutions UserSolution[]
}

model KanaGroup {
    id          String @id @default(cuid())
    name        String
    typeId      String
    type        KanaGroupType @relation(fields: [typeId], references: [id], onDelete: Cascade)
    kanas       Kana[]
}

model KanaGroupType {
    id          String @id @default(cuid())
    name        String
    groups      KanaGroup[]
}

model UserSolution {
    id          String @id @default(cuid())
    kana        Kana @relation(fields: [kanaId], references: [id], onDelete: Cascade)
    kanaId      String
    proposal    String
    correct     Boolean
    date        DateTime
}
